from .filters import mzml_to_json, prefilter_all, return_jsons
from .data_extraction import standard_extraction


def full_extraction(
        extractor_parameters,
        input_folder,
        output_folder,
        compositional_silico_dict):
    """ This function performs all data extraction operations:

    1. Convert .mzML files to .JSON format if required
    2. Pre-filter all JSON's by retention time, minimum MS1 & MS2 intensities,
     minimum MS1 & MS2 total intensity and MS2 parent ion.
    3. Confirm compositions present and generate MS1 EICs.
    4. Perform full in-silico fragmentation on confirmed compositions.
    5. For each sequence, screen for fragments in spectra that match precursor
    mass and pass total intensity and minimum peak abundance thresholds.

    Args:
        extractor_parameters (object): full extractor parameters from parameter
        handlers
        input_folder (str): full filepath to mzml/json input files
        output_folder (str): full filepath to output folder for jsons
        generated by extractors
        compositional_silico_dict (dict): dictionary containing all possible
        compositions and their corresponding MS1 masses

    Returns:
        extracted data (list(str)): full filepaths to extracted full confirmed
        sequence dictionaries
    """
    # convert mzML to json and get list of json files in input folder
    mzml_to_json(input_folder, extractor_parameters)
    rippers = return_jsons(input_folder)

    # apply pre-filters to rippers
    filtered_rippers = prefilter_all(
        rippers=rippers,
        extractor_parameters=extractor_parameters)

    # create confirmed sequence and fragment dictionary
    extracted_data = standard_extraction(
        MS1_silico=compositional_silico_dict,
        rippers=filtered_rippers,
        extractor_parameters=extractor_parameters,
        output=output_folder)

    return extracted_data
